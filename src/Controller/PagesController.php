<?php
declare(strict_types=1);

/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link      https://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   https://opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Core\Configure;
use Cake\Http\Exception\ForbiddenException;
use Cake\Http\Exception\NotFoundException;
use Cake\Http\Response;
use Cake\ORM\Exception\PersistenceFailedException;
use Cake\View\Exception\MissingTemplateException;

/**
 * Static content controller
 *
 * This controller will render views from templates/Pages/
 *
 * @link https://book.cakephp.org/5/en/controllers/pages-controller.html
 */
class PagesController extends AppController
{
    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    private function gerarHash(): string
    {
        $hash = $this->request->getData("email") . date("YmdHis");
        return hash("sha256", $hash);
    }

    private function obterDataExpiracao(): string
    {
        return date("Y-m-d", strtotime("+4 days"));
    }

    public function logar()
    {
        $this->loadComponent('Authentication.Authentication');
        $this->logout();
        $result = $this->Authentication->getResult();

        if (!$result || !$result->isValid()) {
            $codigo = 400;
            $conteudo = [
                'success' => false,
                'message' => 'E-mail ou senha invÃ¡lidos.'
            ];
            return $this->response
                ->withHeader('Access-Control-Allow-Origin', '*')
                ->withStatus($codigo)
                ->withType('application/json')
                ->withStringBody(json_encode($conteudo));
        }

        $user_id = $result->getData()['id'];

        try {
            $salvar = [];
            $salvar["user_id"] = $user_id;
            $salvar["hash"] = $this->gerarHash();
            $salvar["expira"] = $this->obterDataExpiracao();

            $retorno = $this->Autenticacaos->find()
                ->select(["id"])
                ->where(["user_id" => $user_id])
                ->limit(1)
                ->first();

            if ($retorno) {
                $autenticacao_id = $retorno["id"];
                $autenticacao = $this->Autenticacaos->get($autenticacao_id, contain: []);
            } else {
                $autenticacao = $this->Autenticacaos->newEmptyEntity();
            }

            $autenticacao = $this->Autenticacaos->patchEntity($autenticacao, $salvar);
            $this->Autenticacaos->saveOrFail($autenticacao);

            $codigo = 200;
            $conteudo = [
                'success' => true,
                'message' => 'Login realizado com sucesso.',
                'hash' => $autenticacao['hash']
            ];
        } catch (PersistenceFailedException $e) {
            $codigo = 400;
            $conteudo = [
                'success' => false,
                'message' => 'Ocorreram um ou mais erros ao realizar o login.',
                'errors' => $e->getAttributes()
            ];
        }

        return $this->response
            ->withHeader('Access-Control-Allow-Origin', '*')
            ->withStatus($codigo)
            ->withType('application/json')
            ->withStringBody(json_encode($conteudo));
    }

    public function logout()
    {
        $this->Authentication->logout();
    }

    public function buscaruser() {
        $response = null;
        $statusCode = 200;

        if ($this->request->is('post') && !empty($this->request->getData('id')[0])) {
            $sql = 'SELECT * FROM users WHERE users.id = ' . $this->request->getData('id')[0];
        } else {
            $sql = 'SELECT * FROM users ORDER BY users.nome ASC';
        }

        $response = $GLOBALS['connection']->execute($sql)->fetchAll('assoc');

        return $this->response
            ->withHeader('Access-Control-Allow-Origin', '*')
            ->withStatus($statusCode)
            ->withType('application/json')
            ->withStringBody(json_encode($response));
    }
}
